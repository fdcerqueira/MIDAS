#!/bin/bash

###directory of the bash script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

##metasqueeze project directory and sorted bams directory
project=/EVBfrancisco/final_final/Binning/final

##project name
project_name=final

##read the output directory chosen during the assembly.sh script
START_DIR=/EVBfrancisco/final_final

#filtered fastq files
#/EVBfrancisco/final_final/filtered_reads/host_removal add in assembly script PPID
merged=/EVBfrancisco/final_final/host_removal

#auxiliary scripts
download_genomes=$SCRIPT_DIR/midas_parse_taxa.py

#script version, author, date...
#function version() {
#  fsdfs  
#}

MIDAS=$START_DIR/MIDAS	

#directories
midas_database=$MIDAS/midas_database
database=$midas_database/genomes_database
genomes=$MIDAS/genomes
proka=$midas_database/prokka
gene_files=$midas_database/gene_files
map_files=$midas_database/map_files
midas_output=$MIDAS/midas_ouput
midas_final=$MIDAS/midas_final

function show_help() {

    echo "The script will run MIDAS worflow, and/or will install MIDAS and its necessary dependencies"
    echo ""
    echo "How to use: $0 parameters"
    echo  "-n <number of cpus to be used>"
    echo  ""
    echo  "The next options  just need to be write down without any further details to be activated"
    echo  ""	
    echo  "-specific <if you want to use specific genomes. it will ask for the NCBI genome acession"
    echo  "-metagenome <if you want to use the genomes assembled from your metagenome>"
    echo  "-instal<install MIDAS and dependencies>"
    echo  ""
    echo  "The next option is used in the case you have specific genomes already downloaded. Write the folder were they are"
    echo "-genome_directories < write path/to/folder were specific genomes are"
    
    
return 0
}

while [ ! -z "$1" ]
 do
      case "$1" in

      -n) shift 1; CORES=$1 ;;
      -h) shift 1; show_help; exit 1 ;;
      -genome_directories) shift 1; genome_directories=$1;;
      -specific) shift 2; specific=true;;
      -metagenome) shift 2; metagenome=true;;
      -instal)shift 2; instal=true;;
      *) break;;
    esac
shift
done

if [ -z "$CORES" ]
    then
        echo "Need to declare the number of CPUs to be used"
        show_help
        exit 1
fi

MIDAS=$START_DIR/MIDAS	

if [ ! -d $MIDAS ]
 then
 	mkdir $MIDAS
 else
    	echo "output directory  exist. Do you want overwrite it? (y/n)"
    	read sim
        	if [ $sim = "n" ]
            	then
            	exit 1
    	   else
        	rm -rf $MIDAS
        	echo "Creating/overwriting ${instrain} directory"
        	mkdir $MIDAS
        fi
fi

if [ ! -z $genome_directories ]
    then
        while [ ! -d "$genome_directories" ]
            do
                echo "Directory does not exist and/or is not properly written"
       	        read $genome_directories
        done
fi

#function detect worng input directory (extra genomes located on the computer)
function copy() {
    filename=$(basename $i)
    mkdir -p $genomes/${filename}
    cp $i  $genomes/${filename}
}
function copy_genomes() {
    for i in $genome_directories/*.fa*
        do 
            filename=$(basename $i)

            mkdir -p $genomes/${filename}
            cp $i  $genomes/${filename}
    done 
}

#create directories
mkdir -p $midas_database
mkdir -p $genomes
mkdir -p $proka
mkdir -p $gene_files
mkdir -p $map_files
mkdir -p $midas_output
mkdir -p $midas_final

#create database: just with specific taxa
if [ "$specific" = "true" ]
    then
        python $download_genomes $midas_database

        for i in $midas_database/*.fa*
            do
                copy
        done 
        #in case spefic genomes already downloaded should be part of the database
elif [ "$metagenome" = "true" ]
    then

        ###copy final bins with decided completion and redundancy
        echo "creating lists of the bins generated by squeezemeta"

        #create file with bins of interest    
        touch $project/results/DAS/bins.txt
        awk 'BEGIN {FS= "\t"} $12 >= 50 && $13 <= 10 {print $1} ' \
        $project/results/DAS/${project_name}_DASTool_summary.txt > $project/results/DAS/bins.txt
	
	    #add ending pattern to all files
        cp $project/results/DAS/bins.txt $MIDAS/midas.txt
	    sed -e 's/$/.contigs.fa/' -i $MIDAS/midas.txt     
    
        #add path to list
        awk '$1="'$project/results/DAS/${project_name}_DASTool_bins/'"$1' $MIDAS/midas.txt > $MIDAS/bins.txt

        #copy bins
        echo "copying all bins"
        for i in `cat $MIDAS/bins.txt`
            do            
                copy
        done
        
        #create taxonomy file
        for i in `cat $project/results/DAS/bins.txt` 
            do  
                echo "$i"
                grep ${i%%.fa} $project/results/tables/${project_name}.bin.tax.tsv >> $midas_database/taxonomy.txt
        done
        
        #create mapfiles
        touch $map_files/.mapfile 

        #change taxnomy names if necessary
        awk '{if($9=="(no")  { print $1"\t" $6 "\t1"}  else { print $1"\t" $8 $9 "\t1"}}' $midas_database/taxonomy.txt | awk '{print}' > $midas_database/.mapfile
        #add suffix .fa to bins names
        awk ' BEGIN{FS="\t"; OFS="\t"} {$1=$1".fa"}1' $midas_database/.mapfile > $midas_database/intermediate.mapfile
fi

if [ ! -z "$genome_directories" ]
  then
	echo "copying ecoli"
	copy_genomes
fi

#prokka
eval "$(conda shell.bash hook)"
conda activate prokka-env

for i in $(find $genomes/* -type f -name "*.fa*")
    do 
        filename=$(basename $i)

       prokka --outdir $genomes/${filename} --force --prefix $filename --cpus 0 $i
done

#confirm number of columns, create .genes files
csvtk dim --cols -t $genomes/*/*.gff >> $proka/columns.txt
awk '{$1=""}1' $genomes/*/columns.txt | awk '{$1=$1}1' > $proka/colunas.txt

for i in `cat $proka/colunas.txt`
	do 
       
        echo "check if every file as 9 columns"
        echo "${i}"
        if [ "$i" -ne 9 ] 
            then
             echo "$i does no have the proper number of columns"
             echo "exiting script"
             exit 1
        else
            echo "the file $i  has the right number of columns"
        fi
done

for i in $genomes/*/*.gff
  do    
        
    filename=$(basename $i .gff)
    dir_name=$(dirname $i)

    csvtk cut -f 1,3-5,7,9 --ignore-illegal-row -t $i > $proka/${filename}.genes
    csvtk rename -f 1-6 -t -n scaffold_id,gene_type,start,end,strand,gene_id $proka/${filename}.genes > $dir_name/${filename}.genes
done

#create second column of .mapfiles =
for i in $genomes/*/*.fa
    do
        filename=$(basename $i)
        if [ "$metagenome" = "true" ]
            then
                if  grep -q ${filename} $midas_database/intermediate.mapfile
                    then
                        echo " Skipping ${filename%%.fa} for genome_id.txt and species_id.txt"
                        continue
                else
                    echo "creating ${filename} genome_id.txt"
                    echo "${filename}" >> $midas_database/genome_id.txt
                    echo "creating ${filename} species ID"
                    grep -e ">" $i | sed "s/ //g" >> $midas_database/species_id.txt
                fi
        else 
            echo "creating genome_id.txt files"
            ls -1 $genomes > $midas_database/genome_id.txt
            echo "creating species_id.txt files"
            grep -e ">" $i |  sed 's/ //g' >> $midas_database/species_id.txt
        fi
done

#create third column of .mapfiles= print 1 so genomes is checked for snps
echo "create third column for genomes mapfile"
sed 's/$/\t1/' $midas_database/species_id.txt > $midas_database/rep_genomes.txt

#merge the three files together
echo "merge columns to create final genomes.mapfile"
paste $midas_database/genome_id.txt $midas_database/rep_genomes.txt -d "\t" > $midas_database/genome.mapfile

if [ ! -s "$midas_database/genome.mapfile" ]
    then
        echo "genome.mapfile is empty"
        exit 1  
fi 
#if metagenome file exists then apend it to the main file
if [ "$metagenome" = "true" ]
    then
        echo "append MAGs to genome.mapfile"
        cat $midas_database/intermediate.mapfile >> $midas_database/genome.mapfile
fi
 
#add genome information to genomes.mapfile
echo "add colnames to genome.mapfile"
sed -i '1i\genome_id\tspecies_id\trep_genome' $midas_database/genome.mapfile 

awk "{print}" $midas_database/genome.mapfile | sed "s/>//g" > $midas_database/genomes.mapfile 
 
#create midas database
echo "##################################################"
echo "#              Start MIDAS run                   #"
echo "##################################################"

echo "##################################################"
echo "#            Creating MIDAS database             #"
echo "##################################################"

eval "$(conda shell.bash hook)"
conda activate midas

build_midas_db.py $genomes $midas_database/genomes.mapfile $database
 
#export MIDAS_DB=$database
